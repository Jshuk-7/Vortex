#include "vxpch.h"
#include "KeyCodes.h"

namespace Vortex {

	namespace Utils {

		const char* StringFromKeyCode(KeyCode key)
		{
			switch (key)
			{
				case KeyCode::Space: return "Space";
				case KeyCode::Apostrophe: return "Apostrophe";
				case KeyCode::Comma: return "Comma";
				case KeyCode::Minus: return "Minus";
				case KeyCode::Period: return "Period";
				case KeyCode::Slash: return "Slash";
				case KeyCode::D0: return "D0";
				case KeyCode::D1: return "D1";
				case KeyCode::D2: return "D2";
				case KeyCode::D3: return "D3";
				case KeyCode::D4: return "D4";
				case KeyCode::D5: return "D5";
				case KeyCode::D6: return "D6";
				case KeyCode::D7: return "D7";
				case KeyCode::D8: return "D8";
				case KeyCode::D9: return "D9";
				case KeyCode::Semicolon: return "Semicolon";
				case KeyCode::Equal: return "Equal";
				case KeyCode::A: return "A";
				case KeyCode::B: return "B";
				case KeyCode::C: return "C";
				case KeyCode::D: return "D";
				case KeyCode::E: return "E";
				case KeyCode::F: return "F";
				case KeyCode::G: return "G";
				case KeyCode::H: return "H";
				case KeyCode::I: return "I";
				case KeyCode::J: return "J";
				case KeyCode::K: return "K";
				case KeyCode::L: return "L";
				case KeyCode::M: return "M";
				case KeyCode::N: return "N";
				case KeyCode::O: return "O";
				case KeyCode::P: return "P";
				case KeyCode::Q: return "Q";
				case KeyCode::R: return "R";
				case KeyCode::S: return "S";
				case KeyCode::T: return "T";
				case KeyCode::U: return "U";
				case KeyCode::V: return "V";
				case KeyCode::W: return "W";
				case KeyCode::X: return "X";
				case KeyCode::Y: return "Y";
				case KeyCode::Z: return "Z";
				case KeyCode::LeftBracket: return "LeftBracket";
				case KeyCode::Backslash: return "Backslash";
				case KeyCode::RightBracket: return "RightBracket";
				case KeyCode::GraveAccent: return "GraveAccent";
				case KeyCode::World1: return "World1";
				case KeyCode::World2: return "World2";
				case KeyCode::Escape: return "Escape";
				case KeyCode::Enter: return "Enter";
				case KeyCode::Tab: return "Tab";
				case KeyCode::Backspace: return "Backspace";
				case KeyCode::Insert: return "Insert";
				case KeyCode::Delete: return "Delete";
				case KeyCode::eRight: return "eRight";
				case KeyCode::eLeft: return "eLeft";
				case KeyCode::eDown: return "eDown";
				case KeyCode::eUp: return "eUp";
				case KeyCode::PageUp: return "PageUp";
				case KeyCode::PageDown: return "PageDown";
				case KeyCode::Home: return "Home";
				case KeyCode::End: return "End";
				case KeyCode::CapsLock: return "CapsLock";
				case KeyCode::ScrollLock: return "ScrollLock";
				case KeyCode::NumLock: return "NumLock";
				case KeyCode::PrintScreen: return "PrintScreen";
				case KeyCode::Pause: return "Pause";
				case KeyCode::F1: return "F1";
				case KeyCode::F2: return "F2";
				case KeyCode::F3: return "F3";
				case KeyCode::F4: return "F4";
				case KeyCode::F5: return "F5";
				case KeyCode::F6: return "F6";
				case KeyCode::F7: return "F7";
				case KeyCode::F8: return "F8";
				case KeyCode::F9: return "F9";
				case KeyCode::F10: return "F10";
				case KeyCode::F11: return "F11";
				case KeyCode::F12: return "F12";
				case KeyCode::F13: return "F13";
				case KeyCode::F14: return "F14";
				case KeyCode::F15: return "F15";
				case KeyCode::F16: return "F16";
				case KeyCode::F17: return "F17";
				case KeyCode::F18: return "F18";
				case KeyCode::F19: return "F19";
				case KeyCode::F20: return "F20";
				case KeyCode::F21: return "F21";
				case KeyCode::F22: return "F22";
				case KeyCode::F23: return "F23";
				case KeyCode::F24: return "F24";
				case KeyCode::F25: return "F25";
				case KeyCode::KP0: return "KP0";
				case KeyCode::KP1: return "KP1";
				case KeyCode::KP2: return "KP2";
				case KeyCode::KP3: return "KP3";
				case KeyCode::KP4: return "KP4";
				case KeyCode::KP5: return "KP5";
				case KeyCode::KP6: return "KP6";
				case KeyCode::KP7: return "KP7";
				case KeyCode::KP8: return "KP8";
				case KeyCode::KP9: return "KP9";
				case KeyCode::KPDecimal: return "KPDecimal";
				case KeyCode::KPDivide: return "KPDivide";
				case KeyCode::KPMultiply: return "KPMultiply";
				case KeyCode::KPSubtract: return "KPSubtract";
				case KeyCode::KPAdd: return "KPAdd";
				case KeyCode::KPEnter: return "KPEnter";
				case KeyCode::KPEqual: return "KPEqual";
				case KeyCode::LeftShift: return "LeftShift";
				case KeyCode::LeftControl: return "LeftControl";
				case KeyCode::LeftAlt: return "LeftAlt";
				case KeyCode::LeftSuper: return "LeftSuper";
				case KeyCode::RightShift: return "RightShift";
				case KeyCode::RightControl: return "RightControl";
				case KeyCode::RightAlt: return "RightAlt";
				case KeyCode::RightSuper: return "RightSuper";
				case KeyCode::Menu: return "Menu";
			}

			return "Unknown keycode!";
		}

		KeyCode Vortex::Utils::KeyCodeFromString(const char* str)
		{
			if (str == "Space") return KeyCode::Space;
			if (str == "Apostrophe") return KeyCode::Apostrophe;
			if (str == "Comma") return KeyCode::Comma;
			if (str == "Minus") return KeyCode::Minus;
			if (str == "Period") return KeyCode::Period;
			if (str == "Slash") return KeyCode::Slash;
			if (str == "D0") return KeyCode::D0;
			if (str == "D1") return KeyCode::D1;
			if (str == "D2") return KeyCode::D2;
			if (str == "D3") return KeyCode::D3;
			if (str == "D4") return KeyCode::D4;
			if (str == "D5") return KeyCode::D5;
			if (str == "D6") return KeyCode::D6;
			if (str == "D7") return KeyCode::D7;
			if (str == "D8") return KeyCode::D8;
			if (str == "D9") return KeyCode::D9;
			if (str == "Semicolon") return KeyCode::Semicolon;
			if (str == "Equal") return KeyCode::Equal;
			if (str == "A") return KeyCode::A;
			if (str == "B") return KeyCode::B;
			if (str == "C") return KeyCode::C;
			if (str == "D") return KeyCode::D;
			if (str == "E") return KeyCode::E;
			if (str == "F") return KeyCode::F;
			if (str == "G") return KeyCode::G;
			if (str == "H") return KeyCode::H;
			if (str == "I") return KeyCode::I;
			if (str == "J") return KeyCode::J;
			if (str == "K") return KeyCode::K;
			if (str == "L") return KeyCode::L;
			if (str == "M") return KeyCode::M;
			if (str == "N") return KeyCode::N;
			if (str == "O") return KeyCode::O;
			if (str == "P") return KeyCode::P;
			if (str == "Q") return KeyCode::Q;
			if (str == "R") return KeyCode::R;
			if (str == "S") return KeyCode::S;
			if (str == "T") return KeyCode::T;
			if (str == "U") return KeyCode::U;
			if (str == "V") return KeyCode::V;
			if (str == "W") return KeyCode::W;
			if (str == "X") return KeyCode::X;
			if (str == "Y") return KeyCode::Y;
			if (str == "Z") return KeyCode::Z;
			if (str == "LeftBracket") return KeyCode::LeftBracket;
			if (str == "Backslash") return KeyCode::Backslash;
			if (str == "RightBracket") return KeyCode::RightBracket;
			if (str == "GraveAccent") return KeyCode::GraveAccent;
			if (str == "World1") return KeyCode::World1;
			if (str == "World2") return KeyCode::World2;
			if (str == "Escape") return KeyCode::Escape;
			if (str == "Enter") return KeyCode::Enter;
			if (str == "Tab") return KeyCode::Tab;
			if (str == "Backspace") return KeyCode::Backspace;
			if (str == "Insert") return KeyCode::Insert;
			if (str == "Delete") return KeyCode::Delete;
			if (str == "eRight") return KeyCode::eRight;
			if (str == "eLeft") return KeyCode::eLeft;
			if (str == "eDown") return KeyCode::eDown;
			if (str == "eUp") return KeyCode::eUp;
			if (str == "PageUp") return KeyCode::PageUp;
			if (str == "PageDown") return KeyCode::PageDown;
			if (str == "Home") return KeyCode::Home;
			if (str == "End") return KeyCode::End;
			if (str == "CapsLock") return KeyCode::CapsLock;
			if (str == "ScrollLock") return KeyCode::ScrollLock;
			if (str == "NumLock") return KeyCode::NumLock;
			if (str == "PrintScreen") return KeyCode::PrintScreen;
			if (str == "Pause") return KeyCode::Pause;
			if (str == "F1") return KeyCode::F1;
			if (str == "F2") return KeyCode::F2;
			if (str == "F3") return KeyCode::F3;
			if (str == "F4") return KeyCode::F4;
			if (str == "F5") return KeyCode::F5;
			if (str == "F6") return KeyCode::F6;
			if (str == "F7") return KeyCode::F7;
			if (str == "F8") return KeyCode::F8;
			if (str == "F9") return KeyCode::F9;
			if (str == "F10") return KeyCode::F10;
			if (str == "F11") return KeyCode::F11;
			if (str == "F12") return KeyCode::F12;
			if (str == "F13") return KeyCode::F13;
			if (str == "F14") return KeyCode::F14;
			if (str == "F15") return KeyCode::F15;
			if (str == "F16") return KeyCode::F16;
			if (str == "F17") return KeyCode::F17;
			if (str == "F18") return KeyCode::F18;
			if (str == "F19") return KeyCode::F19;
			if (str == "F20") return KeyCode::F20;
			if (str == "F21") return KeyCode::F21;
			if (str == "F22") return KeyCode::F22;
			if (str == "F23") return KeyCode::F23;
			if (str == "F24") return KeyCode::F24;
			if (str == "F25") return KeyCode::F25;
			if (str == "KP0") return KeyCode::KP0;
			if (str == "KP1") return KeyCode::KP1;
			if (str == "KP2") return KeyCode::KP2;
			if (str == "KP3") return KeyCode::KP3;
			if (str == "KP4") return KeyCode::KP4;
			if (str == "KP5") return KeyCode::KP5;
			if (str == "KP6") return KeyCode::KP6;
			if (str == "KP7") return KeyCode::KP7;
			if (str == "KP8") return KeyCode::KP8;
			if (str == "KP9") return KeyCode::KP9;
			if (str == "KPDecimal") return KeyCode::KPDecimal;
			if (str == "KPDivide") return KeyCode::KPDivide;
			if (str == "KPMultiply") return KeyCode::KPMultiply;
			if (str == "KPSubtract") return KeyCode::KPSubtract;
			if (str == "KPAdd") return KeyCode::KPAdd;
			if (str == "KPEnter") return KeyCode::KPEnter;
			if (str == "KPEqual") return KeyCode::KPEqual;
			if (str == "LeftShift") return KeyCode::LeftShift;
			if (str == "LeftControl") return KeyCode::LeftControl;
			if (str == "LeftAlt") return KeyCode::LeftAlt;
			if (str == "LeftSuper") return KeyCode::LeftSuper;
			if (str == "RightShift") return KeyCode::RightShift;
			if (str == "RightControl") return KeyCode::RightControl;
			if (str == "RightAlt") return KeyCode::RightAlt;
			if (str == "RightSuper") return KeyCode::RightSuper;
			if (str == "Menu") return KeyCode::Menu;

			return KeyCode::Space;
		}
	}

}
